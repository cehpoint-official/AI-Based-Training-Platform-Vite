import React, { useState, useEffect } from "react";
import { Card, Spinner } from "flowbite-react";
import { useNavigate } from "react-router-dom";
import found from "@/assets/found.svg";
import axiosInstance from "../axios";

const UserCourses = ({ userId }) => {
  const [courses, setCourses] = useState([]);
  const [processing, setProcessing] = useState(true);

  useEffect(() => {
    const fetchUserCourses = async () => {
      const postURL = `/api/courses?userId=${userId}`;
      try {
        const response = await axiosInstance.get(postURL);
        // console.log(response.data);// array of courses generated by user before only
        setCourses(response.data);
        setProcessing(false);
      } catch (error) {
        fetchUserCourses();
      }
    };

    fetchUserCourses();
  }, [userId]);

  const navigate = useNavigate();
  function redirectGenerate() {
    navigate("/create");
  }

  const handleCourse = (content, mainTopic, type, courseId, completed, end) => {
    const jsonData = JSON.parse(content);
    sessionStorage.setItem("courseId", courseId);
    sessionStorage.setItem("first", completed);
    sessionStorage.setItem("jsonData", JSON.stringify(jsonData));
    let ending = "";
    if (completed) {
      ending = end;
    }
    navigate("/course", {
      state: {
        jsonData: jsonData,
        mainTopic: mainTopic.toUpperCase(),
        type: type.toLowerCase(),
        courseId: courseId,
        end: ending,
      },
    });
  };

  const handleCertificate = (mainTopic, end) => {
    const ending = new Date(end).toLocaleDateString();
    navigate("/certificate", {
      state: { courseTitle: mainTopic, end: ending },
    });
  };

  const style = {
    root: {
      base: "max-w-sm flex rounded-none border border-black bg-white shadow-none dark:border-white dark:bg-black m-4",
      children: "flex h-full flex-col justify-center gap-3 p-5",
      horizontal: {
        off: "flex-col",
        on: "flex-col md:max-w-xl md:flex-row",
      },
      href: "hover:bg-white dark:hover:bg-black",
    },
    img: {
      base: "  object-cover", // 1:1 aspect ratio with a fixed width of 10rem (40 Tailwind units)
      horizontal: {
        off: "rounded-none  object-cover",
        on: "rounded-none  object-cover", // Keeps the fixed width in horizontal mode
      },
    },
  };

  return (
    <div className="my-4">
      {processing ? (
        <div className="text-center h-screen w-screen flex items-center justify-center">
          <Spinner size="xl" className="fill-black dark:fill-white" />
        </div>
      ) : (
        <>
          {courses.length === 0 ? (
            <div className="text-center h-center flex flex-col items-center justify-center">
              <img alt="img" src={found} className="max-w-sm h-3/6" />
              <p className="text-black font-black dark:text-white text-xl">
                Nothing Found
              </p>
              <button
                onClick={redirectGenerate}
                className="bg-black text-white px-5 py-2 mt-4 font-medium dark:bg-white dark:text-black"
              >
                Generate Course
              </button>
            </div>
          ) : (
            <div className="grid grid-cols-1 max-sm:grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-4 gap-6 px-10">
              {courses.map((course) => (
                <div
                  key={course._id}
                  className="flex flex-col border border-black/40 dark:border-white/40 rounded-lg overflow-hidden h-full"
                >
                  {/* Image Portion */}
                  <div className="w-full">
                    <img
                      src={
                        course.photo && course.photo !== "default_image_url"
                          ? course.photo
                          : "https://firebasestorage.googleapis.com/v0/b/ai-based-training-platfo-ca895.appspot.com/o/ai2.jpeg?alt=media&token=b2b3eadd-29eb-4437-97e3-4709d90e4737"
                      }
                      alt={course.mainTopic}
                      className="w-full object-cover sm:aspect-[5/4] sm:h-48 md:aspect-[2/1] md:h-auto"
                    />
                  </div>

                  {/* Details Portion */}
                  <div className="flex flex-col flex-grow p-4 justify-center items-center">
                    <h5 className="text-lg font-bold tracking-tight text-black dark:text-white truncate">
                      {course.mainTopic.toUpperCase()}
                    </h5>
                    <p className="font-normal text-sm capitalize text-black dark:text-white">
                      {course.type}
                    </p>
                    <p className="font-normal text-sm text-black dark:text-white">
                      {new Date(course.date).toLocaleDateString()}
                    </p>
                  </div>

                  {/* Button Portion */}
                  <div className="p-4 flex items-center justify-center">
                    <button
                      onClick={() =>
                        handleCourse(
                          course.content,
                          course.mainTopic,
                          course.type,
                          course._id,
                          course.completed,
                          course.end
                        )
                      }
                      className="rounded-md w-full bg-black text-white px-4 py-2 font-medium dark:bg-white dark:text-black"
                    >
                      Continue
                    </button>
                  </div>
                </div>
              ))}
            </div>
          )}
        </>
      )}
    </div>
  );
};

export default UserCourses;
